require "test_helper"

class PasswordResetsControllerTest < ActionDispatch::IntegrationTest
  setup do
    @<%= singular_table_name %> = <%= table_name %>(:lazaro_nixon)
  end

  test "should get new" do
    get new_passwords_url
    assert_response :success
  end

  test "should get edit" do
    get edit_passwords_url
    assert_response :success
  end

  test "should send a password reset email" do
    assert_enqueued_email_with PasswordMailer, :reset, args: { <%= singular_table_name %>: @<%= singular_table_name %> } do
      put password_resets_url, params: { email: @<%= singular_table_name %>.email }
    end

    assert_redirected_to sign_in_path
  end

  test "should not send a password reset email to a nonexistent email" do
    assert_no_enqueued_emails do
      put password_resets_url, params: { email: "invalid_email@hey.com" }
    end

    assert_redirected_to sign_in_path
    assert_equal "The email address doesn't exist in our database", flash[:alert]
  end

  test "should update password" do
    signed_id = @<%= singular_table_name %>.signed_id(purpose: "password_reset", expires_in: 20.minutes)

    patch password_resets_url, params: { token: signed_id }
    assert_redirected_to sign_in_path
  end

  test "should not update password with expired token" do
    signed_id = @<%= singular_table_name %>.signed_id(purpose: "password_reset", expires_in: 0.seconds)

    patch password_resets_url, params: { token: signed_id }
    assert_redirected_to new_password_resets_path
    assert_equal "Your token has expired, please request a new one", flash[:alert]
  end
end
